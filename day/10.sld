(define-library (day 10)
  (import (scheme base)
          (scheme cxr)
          (aoc file)
          (aoc matrix)
          (scheme write))
  (export get-data run-program-check run-program-on-crt get-line-strings)
(begin

(define (get-data filename)
  (let ((data (reverse (get-line-tokens filename))))
    (map (lambda (token) (if (string=? (car token) "addx")
                           (list (car token) (string->number (cadr token)))
                           token))
         data)))

(define (run-program-check program)
  (let prog-loop ((prog program) (add-cycles 0) (X 1) (cycles 1) (strength-calc #f) (strength 0))
    (cond
      ((and (not strength-calc) (member cycles '(20 60 100 140 180 220)))
       (prog-loop prog add-cycles X cycles #t (+ strength (* cycles X))))
      ((and strength-calc (= cycles 220) strength))
      ((string=? (caar prog) "noop") (prog-loop (cdr prog) 0 X (+ cycles 1) #f  strength))
      ((string=? (caar prog) "addx") (if (zero? add-cycles)
                                          (prog-loop prog 1 X (+ cycles 1) #f strength)
                                          (prog-loop (cdr prog) 0 (+ X (cadar prog)) (+ cycles 1) #f strength))))))

(define (run-program-on-crt program)
  (let ((crt (list->matrix (make-list-of-lists 6 40 #\.))))
    (define (draw-pixel cycle X)
      (let ((row (quotient cycle 40))
            (column (remainder (- cycle 1) 40)))
        (when (<= (- X 1.1) column (+ X 1.1))
          (matrix-set-element! crt row column #\#))))
    (let prog-loop ((prog program) (add-cycles 0)  (X 1) (cycles 1))
      (cond
        ((null? prog)  (map list->string (map vector->list (vector->list (matrix-get-rows crt)))))
        ((string=? (caar prog) "noop") (draw-pixel cycles X)
                                       (prog-loop (cdr prog) 0 X (+ cycles 1)))
        ((string=? (caar prog) "addx") (draw-pixel cycles X)
                                       (if (zero? add-cycles)
                                         (prog-loop prog 1 X (+ cycles 1))
                                         (prog-loop (cdr prog) 0 (+ X (cadar prog)) (+ cycles 1))))))))

))
