(cond-expand
  (guile
    (import (scheme base)
            (scheme file)
            (ports day1) (ports day2) (ports day3) (ports day4) (prefix  (ports day5) day5-) (prefix (ports day6) day6-)
            (prefix (ports 7) day7-)
            (benchmark profiler)))
  (else
    (import (scheme base)
            (scheme file)
            (srfi 1)
            (ports 1) (ports 2) (ports 3) (ports 4) (prefix  (ports 5) day5-) (prefix (ports 6) day6-)
            (prefix (ports 7) day7-)
            (benchmark profiler))))
(start-run)
(run "0.0 value" 3)
(run "0.1 base procedure" (list 3 3 3))
(run "0.2 library procedure" (iota 100))
(run "1.1 most calories" (most-calories (get-data (open-input-file "../data/day1-input.dat"))))
(run "1.2 calories of top three" (calories-of-top-three (get-data (open-input-file "../data/day1-input.dat"))))
(run "2.1 first method score" (score-games-2 (get-data-2 "../data/day2-input.dat")))
(run "2.2 second method score" (score-games-2.1 (get-data-2 "../data/day2-input.dat")))
(run "3.1 compartment priority sum" (filename->result-3.1 "../data/day3-input.dat"))
;(run "3.2 badge priority sum" (filename->result-3.2 "../data/day3-input.dat"))
(run "4.1 fully contained ranges" (filename->result-4.1 "../data/day4-input.dat"))
(run "4.2 overlapping ranges" (filename->result-4.2 "../data/day4-input.dat"))
(run "5.1  mov one at a time" (day5-get-result (day5-run-job (day5-get-data "../data/day5-input.dat"))))
;(run "5.2  mov all at once" (day5-get-result (day5-run-job-2 (day5-get-data "../data/day5-input.dat"))))
(run "6.1 find packet start" (day6-ds-start (day6-get-data "../data/day6-input.dat")))
(run "6.2 find message start" (day6-get-start-of-message (day6-get-data "../data/day6-input.dat")))
(run "7.1 dirs <= 100000" (day7-dirs-with-max-size (day7-get-data "../data/day7-input.dat") 100000))
(run "7.2 space to free" 
     (day7-size-of-dir-to-free-space 70000000 30000000 (day7-get-data "../data/day7-input.dat")))
