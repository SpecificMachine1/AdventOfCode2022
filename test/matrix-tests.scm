(import (scheme base)
        (aoc matrix)
        (srfi 64)
        (day 8)
        (scheme write))
(include "test/runner.scm")
(display "test, \t status \n")
(define data (get-data "../data/test_matrix.dat"))
(test-begin "matrix-tests")
(test-assert "item access" (and (= (matrix-get-element data 0 0) 1)
                                (= (matrix-get-element data 0 1) 2)
                                (= (matrix-get-element data 0 2) 3)
                                (= (matrix-get-element data 1 0) 4)
                                (= (matrix-get-element data 1 1) 5)
                                (= (matrix-get-element data 1 2) 6)
                                (= (matrix-get-element data 2 0) 7)
                                (= (matrix-get-element data 2 1) 8)
                                (= (matrix-get-element data 2 2) 9)))
(test-assert "row access" (and (equal? (matrix-get-row data 0) #(1 2 3))
                               (equal? (matrix-get-row data 1) #(4 5 6))
                               (equal? (matrix-get-row data 2) #(7 8 9))))

(test-assert "column access" (and (equal? (matrix-get-column data 0) #(1 4 7))
                                  (equal? (matrix-get-column data 1) #(2 5 8))
                                  (equal? (matrix-get-column data 2) #(3 6 9))))
(let* ((first #f)
       (last #f)
       (map-f (lambda (element i j)
                (cond
                  ((= element 1) (set! first (list i j))
                                 (* element element))
                  ((= element 9) (set! last (list i j))
                                 (* element element))
                  (else (* element element)))))
       (squares (matrix-map map-f data)))
  (test-equal "start set value" first '(0 0))
  (test-equal "end set value" last '(2 2))
  (test-assert "matrix-map" (and (= (matrix-get-element squares 0 0) 1)
                                (= (matrix-get-element squares 0 1) 4)
                                (= (matrix-get-element squares 0 2) 9)
                                (= (matrix-get-element squares 1 0) 16)
                                (= (matrix-get-element squares 1 1) 25)
                                (= (matrix-get-element squares 1 2) 36)
                                (= (matrix-get-element squares 2 0) 49)
                                (= (matrix-get-element squares 2 1) 64)
                                (= (matrix-get-element squares 2 2) 81))))
(test-assert "item access 2" (and (= (matrix-get-element data 0 0) 1)
                                (= (matrix-get-element data 0 1) 2)
                                (= (matrix-get-element data 0 2) 3)
                                (= (matrix-get-element data 1 0) 4)
                                (= (matrix-get-element data 1 1) 5)
                                (= (matrix-get-element data 1 2) 6)
                                (= (matrix-get-element data 2 0) 7)
                                (= (matrix-get-element data 2 1) 8)
                                (= (matrix-get-element data 2 2) 9)))
(test-equal "vector transpose" #(#(1 4 7) #(2 5 8) #(3 6 9)) (vector-transpose (matrix-get-rows data)))
(test-equal "sub matrix" #(#(2 3) #(5 6)) (matrix-get-rows (keep-for-submatrix data '(0 1) '(1 2))))
(test-end "matrix-tests")
