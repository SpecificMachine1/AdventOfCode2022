(define-library (ports day8)
  (import (scheme base)
          (aoc file)
          (aoc matrix))
  (export get-data visible-trees max-scenic-score)
(begin

(define (get-data filename)
  (let ((lines (reverse (get-line-strings filename))))
    (define (string->digits line)
      (map (lambda (c) (string->number (list->string (list c)))) (string->list line)))
    (list->matrix (map string->digits lines))))

(define (visible-trees matrix)
  (let ((m (matrix-get-m matrix))
        (n (matrix-get-n matrix)))
    (define (visible? i j)
      (let ((element (matrix-get-element matrix i j))
            (row (matrix-get-row matrix i))
            (column (matrix-get-column matrix j)))
        (or (let left-loop ((index 0))
              (cond
                ((= index j) #t)
                ((>= (vector-ref row index) element) #f)
                (else (left-loop (+ index 1)))))
            (let right-loop ((index (+ j 1)))
              (cond
                ((= index n) #t)
                ((>= (vector-ref row index) element) #f)
                (else (right-loop (+ index 1)))))
            (let up-loop ((index 0))
              (cond
                ((= index i) #t)
                ((>= (vector-ref column index) element) #f)
                (else (up-loop (+ index 1)))))
            (let down-loop ((index (+ i 1)))
              (cond
                ((= index m) #t)
                ((>= (vector-ref column index) element) #f)
                (else (down-loop (+ index 1))))))))
    (let i-loop ((i 0) (acc '()))
      (cond
        ((= i m) acc)
        (else (let j-loop ((j 0) (acc acc))
                (cond
                  ((= j n) (i-loop (+ i 1) acc))
                  ((or (zero? i) (zero? j) (= (- m 1) i) (= (- n 1) j))
                   (j-loop (+ j 1) (cons (list i j) acc)))
                  ((visible? i j) (j-loop (+ j 1) (cons (list i j) acc)))
                  (else (j-loop (+ j 1) acc)))))))))

(define (max-scenic-score matrix)
  (let ((m (matrix-get-m matrix))
        (n (matrix-get-n matrix)))
    (define (scenic-score i j)
      (let ((element (matrix-get-element matrix i j))
            (row (matrix-get-row matrix i))
            (column (matrix-get-column matrix j)))
        (* (let left-loop ((index (- j 1)) (acc 1))
             (cond
               ((zero? index) acc)
               ((>= (vector-ref row index) element) acc)
               (else (left-loop (- index 1) (+ acc 1)))))
           (let right-loop ((index (+ j 1)) (acc 1))
             (cond
               ((= index (- n 1)) acc)
               ((>= (vector-ref row index) element) acc)
               (else (right-loop (+ index 1) (+ acc 1)))))
           (let up-loop ((index (- i 1)) (acc 1))
             (cond
               ((zero? index) acc)
               ((>= (vector-ref column index) element) acc)
               (else (up-loop (- index 1) (+ acc 1)))))
           (let down-loop ((index (+ i 1)) (acc 1))
             (cond
               ((= index (- m 1)) acc)
               ((>= (vector-ref column index) element) acc)
               (else (down-loop (+ index 1) (+ acc 1))))))))
    (define (scenic-score-cmp i j result)
      (cond
        ((or (zero? i) (zero? j) (= (- m 1) i) (= (- n 1) j)) result)
        (else (max result (scenic-score i j)))))
    (matrix-fold scenic-score-cmp 0 matrix)))
))
